<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
    http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd"
	default-lazy-init="false">

	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<property name="slowSqlMillis" value="10000" />
		<property name="logSlowSql" value="true" />
	</bean>
	<bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<property name="statementExecutableSqlLogEnable" value="true" />
		<property name="resultSetLogEnabled" value="false" />
	</bean>

	<beans profile="development">
        <!-- Default PropertyPlaceholder definitions -->
		<bean id="extPropertyPlaceholderConfigurer" class="lab.s2jh.core.context.ExtPropertyPlaceholderConfigurer">
			<property name="basePackages" value="lab.s2jh,s2jh.biz" />
			<property name="locations">
				<list>
					<value>classpath*:/application.properties</value>
					<value>classpath*:/jdbc.properties</value>
				</list>
			</property>
			<property name="ignoreResourceNotFound" value="true" />
			<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		</bean>
		
        <!-- Dialect is used to obtain the current objects only and generally do not need to set the default automatic identification of individual environment requires special configuration -->
		<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <!-- Microsoft SQL Server MetaData cloud platform does not return the exact cause can not be accurately using 2012 dialects , so manually set
        jpa_database_platform=org.hibernate.dialect.SQLServer2012Dialect
        <property name="databasePlatform" value="${jpa_database_platform}" />
        -->
		</bean>

        <!-- JDBC connection pool configuration _DruidDataSource https://github.com/alibaba/druid/wiki/ reference configuration -->
		<bean id="druidDataSource" abstract="true" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
			destroy-method="close">
            
            <!-- Configuring the initial size , minimum, maximum, -->
			<property name="initialSize" value="${jdbc_initial_size}" />
			<property name="minIdle" value="${jdbc_min_idle}" />
			<property name="maxActive" value="${jdbc_max_active}" />
            
            <!-- Presented by the external transaction manager handles -->
			<property name="defaultAutoCommit" value="false" />
            
            <!-- Obtain a connection wait timeout -->
			<property name="maxWait" value="60000" />

            <!-- Configuring interval frequency of such testing, test and needs to close idle connections , in milliseconds -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />

            <!-- Configuring a connection pool minimum survival time , in milliseconds -->
			<property name="minEvictableIdleTimeMillis" value="300000" />

			<property name="validationQuery" value="SELECT 'x'" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />

            <!-- Open PSCache, and specify the size of each connection PSCache -->
			<property name="poolPreparedStatements" value="false" />
			<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

            <!-- Configuration monitoring statistics blocking filters, can not be removed after monitoring interface sql statistics -->
			<property name="proxyFilters">
				<list>
					<ref bean="stat-filter" />
					<ref bean="log-filter" />
				</list>
			</property>
		</bean>

       <!-- Separate read and write the main library -->
		<bean id="dataSourceMaster" parent="druidDataSource">
			<property name="url" value="${jdbc_url}" />
			<property name="username" value="${jdbc_username}" />
			<property name="password" value="${jdbc_password}" />
		</bean>

        <!-- Read- write separation from the library , it can increase or decrease the actual definition from the library based on the number of -->
		<bean id="dataSourceSlave01" parent="druidDataSource">
			<property name="url" value="${jdbc_url_slave01}" />
			<property name="username" value="${jdbc_username_slave01}" />
			<property name="password" value="${jdbc_password_slave01}" />
		</bean>

        <!-- Read- write separation from the library , it can increase or decrease the actual definition from the library based on the number of -->
		<bean id="dataSourceSlave02" parent="druidDataSource">
			<property name="url" value="${jdbc_url_slave02}" />
			<property name="username" value="${jdbc_username_slave02}" />
			<property name="password" value="${jdbc_password_slave02}" />
		</bean>

        <!-- Annotation support routing data sources -->
		<bean id="dataSource" class="lab.s2jh.core.dao.router.AnnotationRoutingDataSource">
			<property name="targetDataSources">
				<map>
					<entry key="slave" value-ref="dataSourceSlave" />
					<entry key="master" value-ref="dataSourceMaster" />
				</map>
			</property>
			<property name="defaultTargetDataSource" ref="dataSourceMaster" />
		</bean>
         
        <!-- Support random read-only routing data source from the library , it can increase or decrease the actual definition from the library based on the number of -->
		<bean id="dataSourceSlave" class="lab.s2jh.core.dao.router.RandomRoutingDataSource">
			<property name="dataSources">
				<list>
					<ref bean="dataSourceSlave01" />
					<ref bean="dataSourceSlave02" />
				</list>
			</property>
		</bean>

        <!-- Quartz directly using standard spring jdbc data source , -->
		<bean id="dataSourceQuartz" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="${jdbc_driverClassName}" />
			<property name="url" value="${jdbc_url}" />
			<property name="username" value="${jdbc_username}" />
			<property name="password" value="${jdbc_password}" />
		</bean>

		<import resource="classpath*:/service/spring*.xml" />
	</beans>

	<beans profile="production">
        <!-- Definition of default PropertyPlaceholder -->
		<bean id="extPropertyPlaceholderConfigurer" class="lab.s2jh.core.context.ExtPropertyPlaceholderConfigurer">
			<property name="basePackages" value="lab.s2jh,s2jh.biz" />
			<property name="locations">
				<list>
					<value>classpath*:/application.properties</value>
					<value>classpath*:/application.prd.properties</value>
					<value>classpath*:/build.filter.properties</value>
					<value>file:/j2ee/showcase/config/s2jh4net.properties</value>
				</list>
			</property>
			<property name="ignoreResourceNotFound" value="true" />
			<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		</bean>

        <!-- Dialect is used to obtain the current objects only and generally do not need to set the default automatic identification of individual environment requires special configuration -->
		<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <!-- Microsoft SQL Server MetaData cloud platform does not return the exact cause can not be accurately using 2012 dialects , so manually set
        jpa_database_platform=org.hibernate.dialect.SQLServer2012Dialect
        <property name="databasePlatform" value="${jpa_database_platform}" />
        -->
		</bean>

        <!-- 
JDBC connection pool configuration _DruidDataSource https://github.com/alibaba/druid/wiki/ reference configuration -->
		<bean id="druidDataSource" abstract="true" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
			destroy-method="close">
            
            <!--Configuring the initial size , minimum, maximum, -->
			<property name="initialSize" value="${jdbc_initial_size}" />
			<property name="minIdle" value="${jdbc_min_idle}" />
			<property name="maxActive" value="${jdbc_max_active}" />
            
            <!-- Presented by the external transaction manager handles -->
			<property name="defaultAutoCommit" value="false" />
            
            <!-- Obtain a connection wait timeout -->
			<property name="maxWait" value="60000" />

            <!-- Configuring interval frequency of such testing, test and needs to close idle connections , in milliseconds -->
			<property name="timeBetweenEvictionRunsMillis" value="60000" />

            <!-- Configuring a connection pool minimum survival time , in milliseconds -->
			<property name="minEvictableIdleTimeMillis" value="300000" />

			<property name="validationQuery" value="SELECT 'x'" />
			<property name="testWhileIdle" value="true" />
			<property name="testOnBorrow" value="false" />
			<property name="testOnReturn" value="false" />

            <!-- Open PSCache, and specify the size of each connection PSCache -->
			<property name="poolPreparedStatements" value="false" />
			<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

            <!--Configuration monitoring statistics blocking filters, can not be removed after monitoring interface sql statistics -->
			<property name="proxyFilters">
				<list>
					<ref bean="stat-filter" />
					<ref bean="log-filter" />
				</list>
			</property>
		</bean>

       <!--Separate read and write the main library -->
		<bean id="dataSourceMaster" parent="druidDataSource">
			<property name="url" value="${jdbc_url}" />
			<property name="username" value="${jdbc_username}" />
			<property name="password" value="${jdbc_password}" />
		</bean>

        <!--Read- write separation from the library , it can increase or decrease the actual definition from the library based on the number of-->
		<bean id="dataSourceSlave01" parent="druidDataSource">
			<property name="url" value="${jdbc_url_slave01}" />
			<property name="username" value="${jdbc_username_slave01}" />
			<property name="password" value="${jdbc_password_slave01}" />
		</bean>

        <!-- Read- write separation from the library , it can increase or decrease the actual definition from the library based on the number of -->
		<bean id="dataSourceSlave02" parent="druidDataSource">
			<property name="url" value="${jdbc_url_slave02}" />
			<property name="username" value="${jdbc_username_slave02}" />
			<property name="password" value="${jdbc_password_slave02}" />
		</bean>

        <!-- Annotation support routing data sources -->
		<bean id="dataSource" class="lab.s2jh.core.dao.router.AnnotationRoutingDataSource">
			<property name="targetDataSources">
				<map>
					<entry key="slave" value-ref="dataSourceSlave" />
					<entry key="master" value-ref="dataSourceMaster" />
				</map>
			</property>
			<property name="defaultTargetDataSource" ref="dataSourceMaster" />
		</bean>
         
        <!-- Support random read-only routing data source from the library , it can increase or decrease the actual definition from the library based on the number of -->
		<bean id="dataSourceSlave" class="lab.s2jh.core.dao.router.RandomRoutingDataSource">
			<property name="dataSources">
				<list>
					<ref bean="dataSourceSlave01" />
					<ref bean="dataSourceSlave02" />
				</list>
			</property>
		</bean>

        <!-- Quartz directly using standard spring jdbc data source , -->
		<bean id="dataSourceQuartz" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="${jdbc_driverClassName}" />
			<property name="url" value="${jdbc_url}" />
			<property name="username" value="${jdbc_username}" />
			<property name="password" value="${jdbc_password}" />
		</bean>

		<import resource="classpath*:/service/spring*.xml" />
	</beans>

    <!-- For Unit Test Configuration -->
	<beans profile="test">
        <!--Definition of default PropertyPlaceholder-->
		<bean id="extPropertyPlaceholderConfigurer" class="lab.s2jh.core.context.ExtPropertyPlaceholderConfigurer">
			<property name="basePackages" value="lab.s2jh,s2jh.biz" />
			<property name="locations">
				<list>
					<value>classpath:/application.properties</value>
					<value>classpath:/application-test.properties</value>
				</list>
			</property>
			<property name="ignoreResourceNotFound" value="true" />
			<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		</bean>
		
        <!-- Dialect is used to obtain the current objects only-->
		<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
			<property name="database" value="H2" />
		</bean>

		<!-- Embedded memory database -->
		<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
			<!-- Basic properties url, user, password -->
			<property name="url" value="jdbc:h2:mem:h2db-app" />
			<property name="username" value="sa" />
			<property name="password" value="" />

			<!-- Configuration monitoring statistics blocking filters, can not be removed after monitoring interface sql statistics -->
			<property name="proxyFilters">
				<list>
					<ref bean="log-filter" />
				</list>
			</property>
		</bean>

        <!-- Support random read-only routing data source from the library , it can increase or decrease the actual definition from the library based on the number of-->
		<bean id="dataSourceSlave" class="lab.s2jh.core.dao.router.RandomRoutingDataSource">
			<property name="dataSources">
				<list>
					<ref bean="dataSource" />
				</list>
			</property>
		</bean>

        <!-- Quartz directly using standard spring jdbc data source , -->
		<bean id="dataSourceQuartz" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="org.h2.Driver" />
			<property name="url" value="jdbc:h2:mem:h2db-quartz" />
			<property name="username" value="sa" />
			<property name="password" value="" />
		</bean>
	</beans>

</beans>
