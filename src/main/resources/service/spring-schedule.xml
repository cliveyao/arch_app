<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"
	default-lazy-init="false" default-autowire="no">

	<description>Spring timed task support</description>

	<!-- Based on the timing task list Spring Schedule XML configuration suitable for defining each server node to perform and does not require logging , no management interface features such as support for intervention tasks -->
	<task:scheduled-tasks scheduler="springScheduler">
		<!-- Fixed interval trigger the task , in milliseconds -->
		<task:scheduled ref="systemSechduleService" method="statOnlineUserCount" fixed-rate="300000" />

	</task:scheduled-tasks>

    <!-- Quartz DDL automatically initialized based on the database type detected -->
	<bean name="quartzDatabaseDataInitialize" class="lab.s2jh.module.schedule.data.QuartzDatabaseDataInitialize">
		<property name="dataSource" ref="dataSourceQuartz" />
	</bean>

	<bean id="transactionManagerQuartz" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceQuartz" />
	</bean>

	<!-- Based on the task list and Spring Quartz integration RAM memory to store non- cluster cluster tasks defined for each server node execution -->
	<bean id="quartzRAMScheduler" class="lab.s2jh.module.schedule.ExtSchedulerFactoryBean" depends-on="quartzDatabaseDataInitialize">
		<property name="schedulerName" value="quartzRAMScheduler" />
		<!-- quartz Configuration -->
		<property name="configLocation" value="classpath:quartz-ram.properties" />
		<!-- Extension N seconds to start the task at startup -->
		<property name="startupDelay" value="30" />
		<!-- Job accepted applicationContext member variable name -->
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<!-- Triggers static configurations that run in fixing Trigger mode , if you need to update the modified application deployment configuration update to take effect -->
		<property name="triggers">
			<list>
				<!-- Timing task statistics database state information presentation in a clustered environment only need to perform any of the nodes statistics -->
				<bean id="lab.s2jh.module.schedule.job.ServerMonitorJob.Trigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
					<property name="jobDetail">
						<bean name="lab.s2jh.schedule.job.ServerMonitorJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
							<property name="jobClass" value="lab.s2jh.module.schedule.job.ServerMonitorJob" />
							<property name="durability" value="true" />
						</bean>
					</property>
					<property name="cronExpression" value="0 0 7-23 * * ?" />
				</bean>
			</list>
		</property>
		<!-- Service timed task configuration objects injection , automatic access to the database timed task configuration and then dynamically loaded into the Quartz Scheduler, and provide management interface can be dynamically updated in real time and perform other operations immediately-->
		<property name="jobBeanCfgService" ref="jobBeanCfgService" />
	</bean>

	<!-- Based on Spring and Quartz integration and support cluster cluster task list for the task to define the need to ensure the same time only a task instance execution across multiple server nodes -->
	<bean id="quartzClusterScheduler" class="lab.s2jh.module.schedule.ExtSchedulerFactoryBean" depends-on="quartzDatabaseDataInitialize">
		<property name="schedulerName" value="quartzClusterScheduler" />
		<!-- quartz Configuration -->
		<property name="configLocation" value="classpath:quartz-cluster.properties" />
		<!-- Extension N seconds to start the task at startup -->
		<property name="startupDelay" value="30" />
		<!-- Save Job data to the required data source database -->
		<property name="dataSource" ref="dataSourceQuartz" />
		<property name="transactionManager" ref="transactionManagerQuartz" />
		<!-- Job accepted applicationContext member variable name -->
		<property name="applicationContextSchedulerContextKey" value="applicationContext" />
		<!-- Database with the latest configuration overwrites the previous configuration -->
		<property name="overwriteExistingJobs" value="true" />

		<!-- Triggers static configurations that run in fixing Trigger mode , if you need to update the modified application deployment configuration update to take effect-->
		<property name="triggers">
			<list>
				<!-- Timing task statistics database state information presentation in a clustered environment only need to perform any of the nodes statistics -->
				<bean id="lab.s2jh.module.schedule.job.DatabaseMonitorJob.Trigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
					<property name="jobDetail">
						<bean name="lab.s2jh.module.schedule.job.DatabaseMonitorJob" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
							<property name="jobClass" value="lab.s2jh.module.schedule.job.DatabaseMonitorJob" />
							<property name="durability" value="true" />
						</bean>
					</property>
					<property name="cronExpression" value="0 0 0 * * ?" />
				</bean>
			</list>
		</property>
		<!-- Service timed task configuration objects injection , automatic access to the database timed task configuration and then dynamically loaded into the Quartz Scheduler, and provide management interface can be dynamically updated in real time and perform other operations immediately -->
		<property name="jobBeanCfgService" ref="jobBeanCfgService" />
	</bean>

</beans>
